{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","potato","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA+IA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAoBzBC,MArDf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACfL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC4FbC,6MA/EbC,MAAQ,KA+BNC,cAAgB,WAUd,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GAEnC,OADAC,QAAQC,IAAIF,GACL3B,EAAAC,EAAAC,cAAC4B,EAAD,CACP1B,MAAOuB,EAAMI,cACbjC,OAAQ6B,EAAMK,mBACdjB,IAAKY,EAAMM,GACXtB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAOtBsB,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYf,EAAKgB,WADjB,OACHf,EADGY,EAAAI,KAETjB,EAAKkB,SAAS,CACZjB,WAHO,wBAAAY,EAAAM,SAAAT,EAAAU,WAQbJ,SAAW,WACT,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKxB,SACvByB,MAAM,SAAAC,GAAG,OAAIxB,QAAQC,IAAIuB,yFA9BxBP,KAAKX,8CAyCA,IACCR,EAAWmB,KAAKtB,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,eAC9BA,EAASmB,KAAKrB,gBAAkB,6BA3EvB6B,aCtIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.7d976cf5.chunk.js","sourcesContent":["// // import React, { Component } from 'react';\r\n// // import PropTypes from 'prop-types';\r\n\r\n// // class Movie extends Component {\r\n// //     // render() {\r\n// //     //     return(\r\n// //     //         <div>\r\n// //     //             <h1>{this.props.title}</h1>\r\n// //     //             <MoviePoster poster={this.props.poster}/>\r\n// //     //             <MovieDiscription disc={this.props.disc}/>\r\n// //     //             {/* <img src={this.props.poster}/> */}\r\n\r\n// //     //         </div>\r\n// //     //     );\r\n// //     // }\r\n\r\n// //     static PropTypes = {\r\n// //         //isRequired : 필수체크\r\n// //         title: PropTypes.string.isRequired,\r\n// //         poster: PropTypes.string.isRequired\r\n// //     }\r\n\r\n// //     //정해져있는 생성자함수\r\n// //     // constructor(props) {\r\n// //     //     //super()를 사용하지 않으면 아래처럼 this.state로 사용이 불가능\r\n// //     //     super(props);\r\n// //     //     this.state = {\r\n// //     //         number: 0\r\n// //     //     }\r\n// //     // }\r\n\r\n// //     render() {\r\n// //         console.log(this.props)\r\n// //         return (\r\n// //             <span>\r\n// //                 {/* <img src={this.props.poster}/> */}\r\n// //                 <MoviePoster poster={this.props.poster} />\r\n// //                 <h1>{this.props.title}</h1>\r\n// //                 {/* <p>숫자: {this.state.number}</p>\r\n// //                 <button onClick={() => {\r\n// //                     this.setState({\r\n// //                         number: this.state.number + 1\r\n// //                     })\r\n// //                 }\r\n// //                 }>더하기</button> */}\r\n// //             </span>\r\n// //         )\r\n// //     }\r\n// // }\r\n\r\n// // class MoviePoster extends Component {\r\n// //     // render() {\r\n// //     //     return(\r\n// //     //         <img src={this.props.poster} width=\"300\" height=\"auto\"></img>\r\n// //     //     );\r\n// //     // }\r\n\r\n// //     static PropTypes = {\r\n// //         poster: PropTypes.string.isRequired\r\n// //     }\r\n\r\n// //     render() {\r\n// //         console.log(this.props)\r\n// //         return (\r\n// //             <img src={this.props.poster} alt=\"Movie Poster\" width=\"300\" height=\"auto\" />\r\n// //         )\r\n// //     }\r\n// // }\r\n\r\n// // // class MovieDiscription extends Component {\r\n// // //     render() {\r\n// // //         return(\r\n// // //             <p>{this.props.disc}</p>\r\n// // //         );\r\n// // //     }\r\n// // // }\r\n\r\n// // export default Movie;\r\n\r\n\r\n// import React from 'react';\r\n// import PropTypes from 'prop-types';\r\n// // import './Movie.css';\r\n\r\n\r\n// function Movie({title, poster}){\r\n//    return (\r\n//        <div>\r\n//            <MoviePoster poster={poster} />\r\n//            <h1>{title}</h1>\r\n//        </div>\r\n//    )\r\n// }\r\n\r\n// function MoviePoster({poster}){\r\n//    return (\r\n//        <img src={poster} alt=\"Movie Poster\" width=\"300\" height=\"auto\" />   \r\n//    )\r\n// } // return을 하기 위해 존재, component will mount, function, update state등이 필요 없다.\r\n//  // render도 없고 라이프사이클도 없다.\r\n\r\n//  Movie.propTypes = {\r\n//    title: PropTypes.string.isRequired,\r\n//    poster: PropTypes.string.isRequired\r\n// }\r\n\r\n// MoviePoster.propTypes = {\r\n//    poste: PropTypes.string.isRequired\r\n// }\r\n\r\n// export default Movie;\r\n\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>   \r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes ={\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","// import React, { Component } from 'react';\n// // import logo from './logo.svg';\n// import './App.css';\n// import Movie from './Movie';\n\n// // const moviesTitles = [\n// //   \"캡틴아메리카 퍼스트어벤져\",\n// //   \"아이언맨\",\n// //   \"토르 천둥의신\",\n// //   \"스파이더맨 홈커밍\"\n// // ]\n\n// // const movieimage = [\n// //   \"https://t1.daumcdn.net/cfile/tistory/2170994A53C3A98103\",\n// //   \"http://thumbnail.egloos.net/600x0/http://pds27.egloos.com/pds/201804/20/59/c0225259_5ad995f0aa663.jpg\",\n// //   \"https://t1.daumcdn.net/cfile/tistory/1166BE564DBBFECC27\",\n// //   \"https://steemitimages.com/p/MvwLKy3SfvJwXFKCRMDAFrt961WESMBeWhysGNKe6?format=match&mode=fit\"\n// // ]\n\n// // const movieDiscription = [\n// //   \"군인아저씨 영화\"\n// //   , \"로봇아저씨 영화\"\n// //   , \"신 아저씨 영화\"\n// //   , \"거미 아저씨 영화\"\n// // ]\n\n// class App extends Component {\n//   // state : 각자가 가지고 있는 값. 컴포넌트 내부에서만 값을 변경할 수 있음.\n//   // state = {\n//   //   greeting: 'Hello!',\n//   //   movies : [\n//   //     {\n//   //       title: \"캡틴아메리카 퍼스트어벤져\",\n//   //       poster: \"https://t1.daumcdn.net/cfile/tistory/2170994A53C3A98103\"\n//   //     },\n//   //     {\n//   //       title: \"아이언맨\",\n//   //       poster: \"http://thumbnail.egloos.net/600x0/http://pds27.egloos.com/pds/201804/20/59/c0225259_5ad995f0aa663.jpg\"\n//   //     },\n//   //     {\n//   //       title: \"토르 천둥의신\",\n//   //       poster: \"https://t1.daumcdn.net/cfile/tistory/1166BE564DBBFECC27\"\n//   //     },\n//   //     {\n//   //       title: \"스파이더맨 홈커밍\",\n//   //       poster: \"https://steemitimages.com/p/MvwLKy3SfvJwXFKCRMDAFrt961WESMBeWhysGNKe6?format=match&mode=fit\"\n//   //     }\n//   //   ]\n//   // }\n//   // componentDidMount() {\n//   //   setTimeout(() => {\n//   //     // this.state.greeting = 'something'\n//   //     this.setState({\n//   //       greeting: 'Hello again!'\n//   //     })\n//   //   } , 5000)\n//   // }\n\n//   state = {\n//   }\n//   componentDidMount() {\n//     setTimeout(() => {\n//       this.setState({   \n//         movies: [\n//           {\n//             title: \"캡틴아메리카 퍼스트어벤져\",\n//             poster: \"https://t1.daumcdn.net/cfile/tistory/2170994A53C3A98103\"\n//           },\n//           {\n//             title: \"아이언맨\",\n//             poster: \"http://thumbnail.egloos.net/600x0/http://pds27.egloos.com/pds/201804/20/59/c0225259_5ad995f0aa663.jpg\"\n//           },\n//           {\n//             title: \"토르 천둥의신\",\n//             poster: \"https://t1.daumcdn.net/cfile/tistory/1166BE564DBBFECC27\"\n//           },\n//           {\n//             title: \"스파이더맨 홈커밍\",\n//             poster: \"https://steemitimages.com/p/MvwLKy3SfvJwXFKCRMDAFrt961WESMBeWhysGNKe6?format=match&mode=fit\"\n//           },\n//           {\n//             title: \"블랙팬서\",\n//             poster: \"https://t1.daumcdn.net/movie/e09f36bdccea7aea57a465c59cd20e2c6a8887e9\"\n//           }\n//         ]\n//       })  \n//     }, 5000)\n//   }\n\n//   // render 후 실행되는 라이프사이클\n//   // componentDidMount() {\n//   //   setTimeout(() => {\n//   //     this.setState({    \n//   //       movies: [\n//   //         ...this.state.movies, //기존 부분을 남기는 역할\n//   //         {\n//   //           title: \"블랙팬서\",\n//   //           poster: \"https://t1.daumcdn.net/movie/e09f36bdccea7aea57a465c59cd20e2c6a8887e9\"\n//   //         }\n//   //       ]\n//   //     })   \n//   //   }, 5000) \n//   // } \n  \n//   // render() {\n//   //   return(\n//   //     // <div className=\"App\">\n//   //     //   <Movie title={moviesTitles[0]} poster={movieimage[0]} disc={movieDiscription[0]}></Movie>\n//   //     //   <Movie title={moviesTitles[1]} poster={movieimage[1]} disc={movieDiscription[1]}></Movie>\n//   //     //   <Movie title={moviesTitles[2]} poster={movieimage[2]} disc={movieDiscription[2]}></Movie>\n//   //     //   <Movie title={moviesTitles[3]} poster={movieimage[3]} disc={movieDiscription[3]}></Movie>\n//   //     // </div>\n\n//   //     <div className=\"App\">\n//   //       {this.state.greeting}\n//   //       {this.state.movies.map((movie, index) => {\n//   //         return <Movie title={movie.title} poster={movie.poster} key={index} />\n//   //       })}\n//   //     </div>\n//   //   );\n//   // }\n\n//   _renderMovies = () => {\n//     const movies = this.state.movies.map((movie, index) => {\n//       return <Movie title={movie.title} poster={movie.poster} key={index} />\n//     })\n//     return movies\n//   } // 리액트 자체기능이 많기 때문에 _를 붙임\n//     // = () => 최신 자바스크립트\n//     // [<Movie props />, <Movie props />] 정렬된 항목을 보여줌\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         {this.state.movies ? this._renderMovies() : '로딩중'} \n//       </div> // 데이터가 있는지 체크\n//     );\n//   }\n// }\n\n// export default App;\n\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  state = {}\n\n  // componentDidMount() {\n  //   // console.log(fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')) //promise가 뜸\n  //   fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n  //   //.then(hansol => console.log(hansol))\n  //   .then(hansol => hansol.json()) // fetch에서 hansol이 만들어진다. response로 체크하고 \n  //   .then(json => console.log(json)) // hansol.json()에서 json이 만들어진다. json으로 변환, 콘솔로 확인\n  //   .catch(err => console.log(err)) \n  // } // fetch가 없을 때는 XMLHttpRequest를 사용했음\n  \n  // fetch() (응답을 반환)\n  // .then(hansol => hansol.json()) (json을 반환)\n  // .then(json => 무엇이든)\n\n  // consolef로 확인하면 promise가 뜬다.\n  // promise는 새로운 자바스크립트 컨셉\n  // 비동기 프로그래밍 때문, 시나리오를 잡는 방법을 가르쳐준다. 성공적으로 수행할 수 있고, 그렇지 않을 경우 결과물을 catch, then으로\n\n  // _renderMovies = () => {\n  //   const movies = this.state.movies.map((movie, index) => {\n  //     return <Movie title={movie.title} poster={movie.poster} key={index} />\n  //   }) \n  //   return movies\n  // } // 리액트 자체기능이 많기 때문에 _를 붙임\n  //   // = () => 최신 자바스크립트 \n  //   // [<Movie props />, <Movie props />] 정렬된 항목을 보여줌\n    componentDidMount() {\n      this._getMovies();\n    }\n\n    _renderMovies = () => {\n      const movies = this.state.movies.map(movie => {\n        console.log(movie)\n        return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}/>\n      })\n      return movies\n    } // 리액트 자체기능이 많기 때문에 _를 붙임\n      // = () => 최신 자바스크립트\n      // [<Movie props />, <Movie props />] 정렬된 항목을 보여줌\n\n  _getMovies = async () => {\n      const movies = await this._callApi() // function callApi를 await 모드로\n      this.setState({\n        movies\n      })\n       //'성공적으로 수행'을 기다리는 것이 아니라, '끝나기를' 기다린다. callApi의 return value가 무엇이든. 그 value를 movies에 넣는다.\n    } // 순서와 상관없이 작업 진행\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(potato => potato.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n    } // fetch가 없을 때는 XMLHttpRequest를 사용했음\n\n  // render() {\n  //   return (\n  //     <div className=\"App\">\n  //       {this.state.movies ? this._renderMovies() : '로딩중'}  \n  //     </div> // 데이터가 있는지 체크\n  //   );\n  // }\n\n  render() {\n    const { movies } = this.state\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {movies ? this._renderMovies() : '로딩중'} \n      </div> // 데이터가 있는지 체크\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}